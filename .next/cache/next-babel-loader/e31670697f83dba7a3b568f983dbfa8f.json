{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport function getStrapiURL(path) {\n  return `${process.env.NEXT_PUBLIC_STRAPI_API_URL || \"https://powerful-inlet-15180.herokuapp.com/\"}${path}`;\n} // Helper to make GET requests to Strapi\n\nexport async function fetchAPI(path, options = {}) {\n  const defaultOptions = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  const mergedOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n\n  const requestUrl = getStrapiURL(path);\n  const response = await fetch(requestUrl, mergedOptions);\n\n  if (!response.ok) {\n    console.error(response.statusText);\n    throw new Error(`An error occured please try again`);\n  }\n\n  const data = await response.json();\n  return data;\n}\nexport async function getPageData(slug, preview = false) {\n  // Find the pages that match this slug\n  const pagesData = await fetchAPI(`/pages?slug=${slug}&status=published${preview ? \"&status=draft\" : \"\"}`); // Make sure we found something, otherwise return null\n\n  if (pagesData == null || pagesData.length === 0) {\n    return null;\n  } // Return the first item since there should only be one result per slug\n\n\n  return pagesData[0];\n} // Get site data from Strapi (metadata, navbar, footer...)\n\nexport async function getGlobalData() {\n  const global = await fetchAPI(\"/global\");\n  return global;\n}","map":null,"metadata":{},"sourceType":"module"}