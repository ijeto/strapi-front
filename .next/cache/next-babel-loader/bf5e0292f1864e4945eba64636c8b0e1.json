{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport function getStrapiURL(path) {\n  return \"\".concat(process.env.NEXT_PUBLIC_STRAPI_API_URL || \"https://powerful-inlet-15180.herokuapp.com/\").concat(path);\n} // Helper to make GET requests to Strapi\n\nexport function fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var options,\n        defaultOptions,\n        mergedOptions,\n        requestUrl,\n        response,\n        data,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            defaultOptions = {\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            };\n            mergedOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n            requestUrl = getStrapiURL(path);\n            _context.next = 6;\n            return fetch(requestUrl, mergedOptions);\n\n          case 6:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            console.error(response.statusText);\n            throw new Error(\"An error occured please try again\");\n\n          case 10:\n            _context.next = 12;\n            return response.json();\n\n          case 12:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getPageData(_x2) {\n  return _getPageData.apply(this, arguments);\n} // Get site data from Strapi (metadata, navbar, footer...)\n\nfunction _getPageData() {\n  _getPageData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(slug) {\n    var preview,\n        pagesData,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            preview = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : false;\n            _context2.next = 3;\n            return fetchAPI(\"/pages?slug=\".concat(slug, \"&status=published\").concat(preview ? \"&status=draft\" : \"\"));\n\n          case 3:\n            pagesData = _context2.sent;\n\n            if (!(pagesData == null || pagesData.length === 0)) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", null);\n\n          case 6:\n            return _context2.abrupt(\"return\", pagesData[0]);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getPageData.apply(this, arguments);\n}\n\nexport function getGlobalData() {\n  return _getGlobalData.apply(this, arguments);\n}\n\nfunction _getGlobalData() {\n  _getGlobalData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var global;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetchAPI(\"/global\");\n\n          case 2:\n            global = _context3.sent;\n            return _context3.abrupt(\"return\", global);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getGlobalData.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}