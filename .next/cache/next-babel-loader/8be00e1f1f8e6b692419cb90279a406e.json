{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Button from '../elements/button';\nimport { useState } from 'react';\nimport { fetchAPI } from 'utils/api';\nimport * as yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\n\nvar LeadForm = function LeadForm(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var LeadSchema = yup.object().shape({\n    email: yup.string().email().required()\n  });\n  return __jsx(\"div\", {\n    className: \"py-10 text-center\"\n  }, __jsx(\"h1\", {\n    className: \"text-3xl mb-10 font-bold mb-2\"\n  }, data.title), __jsx(\"div\", {\n    className: \"flex flex-col items-center\"\n  }, __jsx(Formik, {\n    initialValues: {\n      email: ''\n    },\n    validationSchema: LeadSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var setSubmitting, setErrors;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setSubmitting = _ref2.setSubmitting, setErrors = _ref2.setErrors;\n                setLoading(true);\n                _context.prev = 2;\n                setErrors({\n                  api: null\n                });\n                _context.next = 6;\n                return fetchAPI('/lead-form-submissions', {\n                  method: 'POST',\n                  body: JSON.stringify({\n                    email: values.email,\n                    location: data.location\n                  })\n                });\n\n              case 6:\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](2);\n                setErrors({\n                  api: _context.t0.message\n                });\n\n              case 11:\n                setLoading(false);\n                setSubmitting(false);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 8]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  }, function (_ref4) {\n    var errors = _ref4.errors,\n        touched = _ref4.touched,\n        isSubmitting = _ref4.isSubmitting;\n    return __jsx(\"div\", null, __jsx(Form, {\n      className: \"flex flex-col md:flex-row gap-4\"\n    }, __jsx(Field, {\n      className: \"text-base focus:outline-none py-4 md:py-0 px-4 border-2 rounded-md\",\n      type: \"email\",\n      name: \"email\",\n      placeholder: data.emailPlaceholder\n    }), __jsx(Button, {\n      type: \"submit\",\n      button: data.submitButton,\n      disabled: isSubmitting,\n      loading: loading\n    })), __jsx(\"p\", {\n      className: \"text-red-500 h-12 text-sm mt-1 ml-2 text-left\"\n    }, errors.email && touched.email && errors.email || errors.api));\n  })));\n};\n\nexport default LeadForm;","map":null,"metadata":{},"sourceType":"module"}