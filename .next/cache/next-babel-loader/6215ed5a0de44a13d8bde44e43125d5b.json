{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App from \"next/app\";\nimport Head from \"next/head\";\nimport ErrorPage from \"next/error\";\nimport { useRouter } from \"next/router\";\nimport { DefaultSeo } from \"next-seo\";\nimport { getStrapiMedia } from \"utils/media\";\nimport { getStrapiURL, getGlobalData } from \"utils/api\";\nimport Layout from \"@/components/layout\";\nimport \"@/styles/index.css\";\n\nconst MyApp = ({\n  Component,\n  pageProps\n}) => {\n  // Prevent Next bug when it tries to render the [[...slug]] route\n  const router = useRouter();\n\n  if (router.asPath === \"/[[...slug]]\") {\n    return null;\n  } // Extract the data we need\n\n\n  const {\n    global\n  } = pageProps;\n\n  if (global == null) {\n    return __jsx(ErrorPage, {\n      statusCode: 404\n    });\n  }\n\n  const {\n    metadata\n  } = global;\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"link\", {\n    rel: \"shortcut icon\",\n    href: getStrapiMedia(global.favicon.url)\n  })), __jsx(DefaultSeo, {\n    titleTemplate: `%s | ${global.metaTitleSuffix}`,\n    title: \"Page\",\n    description: metadata.metaDescription,\n    openGraph: {\n      images: Object.values(metadata.shareImage.formats).map(image => {\n        return {\n          url: getStrapiMedia(image.url),\n          width: image.width,\n          height: image.height\n        };\n      })\n    },\n    twitter: {\n      cardType: metadata.twitterCardType,\n      handle: metadata.twitterUsername\n    }\n  }), __jsx(Layout, {\n    global: global\n  }, __jsx(Component, pageProps)));\n}; // getInitialProps disables automatic static optimization for pages that don't\n// have getStaticProps. So [[...slug]] pages still get SSG.\n// Hopefully we can replace this with getStaticProps once this issue is fixed:\n// https://github.com/vercel/next.js/discussions/10949\n\n\nMyApp.getInitialProps = async ctx => {\n  // Calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(ctx); // Fetch global site settings from Strapi\n\n  const global = await getGlobalData(); // Pass the data to our page via props\n\n  return _objectSpread(_objectSpread({}, appProps), {}, {\n    pageProps: {\n      global,\n      path: ctx.pathname\n    }\n  });\n};\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}